import { GetServerSideProps } from "next";
import Head from "next/head";
import { GraphQLClient, gql } from "graphql-request";
import { GameBoard } from "../../components/GameBoard";
import { Header } from "../../components/Header";
import { Options } from "../../components/Options";
import { GameModel } from "../../models/GameModel";
import { OptionsModel } from "../../models/OptionsModel";

type GamePageProps = {
  code: string;
  game_id: string;
  board_id: string;
};

export default function GamePage({ code, game_id, board_id }: GamePageProps) {
  const options = new OptionsModel(8);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="mx-auto w-[500px] space-y-2">
        <div className="flex justify-center">{code}</div>

        <GameBoard
          game={
            new GameModel(
              4,
              10,
              options,
              code.split("").map((char) => parseInt(char)),
              game_id,
              board_id
            )
          }
        />
        <Options options={options} />
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<
  GamePageProps,
  { id: string }
> = async ({ params, query }) => {
  const endpoint = " https://mastermind-api.onrender.com/graphql";

  const graphQLClient = new GraphQLClient(endpoint);

  const queryy = gql`
    query findGameById($id: ID!) {
      findGameById(id: $id) {
        code
        id
      }
    }
  `;

  const variables = {
    id: params?.id ?? "",
  };

  const data = await graphQLClient.request(queryy, variables);

  return {
    props: {
      code: data.findGameById.code,
      game_id: params?.id ?? "",
      board_id: typeof query?.boardId === "string" ? query?.boardId : "",
    },
  };
};
