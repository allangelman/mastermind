import { GetServerSideProps } from "next";
import Head from "next/head";
import { GameBoard } from "../../components/GameBoard";
import { Header } from "../../components/Header";
import { Options } from "../../components/Options";
import { OptionsModel } from "../../models/OptionsModel";
import { FeedbackModel } from "../../models/FeedbackModel";
import { GameBoardRowModel } from "../../models/GameBoardRowModel";
import { GameBoardModel, GameResult } from "../../models/GameBoardModel";
import {
  createBoardData,
  createBoardVariables,
  CREATE_GAME_BOARD,
  existingRowData,
  getBoardData,
  getBoardVariables,
  getGameData,
  getGameVariables,
  GET_BOARD,
  GET_GAME,
  GQLClient,
} from "../../lib/graphQLClient";
import { useRouter } from "next/router";
import { useEffect } from "react";

type GamePageProps = {
  code: string;
  game_id: string;
  board_id: string;
  existingRows: existingRowData[];
  result?: GameResult | null;
  newBoard: boolean;
};

export default function GamePage({
  code,
  game_id,
  board_id,
  existingRows,
  result,
  newBoard,
}: GamePageProps) {
  const options = new OptionsModel(8);
  const router = useRouter();

  useEffect(() => {
    if (newBoard) {
      router.push(`/game/${game_id}?boardId=${board_id}`);
    }
  }, [router, newBoard]);

  const existingRowsReady = [];
  for (let i = 0; i < existingRows.length; i++) {
    const rowData = existingRows[i];

    const values = rowData.values
      .split("")
      .map((char: string) => parseInt(char));

    const feedbackModel = new FeedbackModel(
      values,
      code.split("").map((char) => parseInt(char))
    );

    const row = new GameBoardRowModel(
      4,
      code.split("").map((char) => parseInt(char)),
      i,
      board_id,
      values,
      feedbackModel
    );
    existingRowsReady.push(row);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="mx-auto w-[500px] space-y-2">
        <div className="flex justify-center">{code}</div>
        <div>To invite others, send this link:</div>
        <div>
          mastermind-olive.vercel.app/game/
          {game_id}
        </div>
        <GameBoard
          board={
            new GameBoardModel(
              4,
              10,
              options,
              code.split("").map((char) => parseInt(char)),
              game_id,
              board_id,
              existingRowsReady,
              result ? result : undefined
            )
          }
        />
        <Options options={options} />
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<
  GamePageProps,
  { id: string }
> = async ({ params, query }) => {
  const gql = new GQLClient();

  const gameData = await gql.request<getGameData, getGameVariables>(GET_GAME, {
    id: params?.id ?? "",
  });

  let getBoardData: getBoardData;
  let createBoardData: createBoardData;
  let boardId: string | undefined;
  let existingRows: existingRowData[] = [];
  let result: GameResult | null = null;
  let newBoard: boolean = false;

  if (typeof query?.boardId === "string" && query.boardId) {
    boardId = query?.boardId;
  }

  if (!boardId) {
    createBoardData = await gql.request<createBoardData, createBoardVariables>(
      CREATE_GAME_BOARD,
      {
        createGameBoardInput: { game_id: params?.id ?? "" },
      }
    );
    boardId = createBoardData.createGameBoard.id;
    newBoard = true;
  } else {
    getBoardData = await gql.request<getBoardData, getBoardVariables>(
      GET_BOARD,
      {
        id: boardId ? boardId : "",
      }
    );
    existingRows = getBoardData?.findGameBoardById.rows;
    result = getBoardData?.findGameBoardById.result
      ? getBoardData?.findGameBoardById.result
      : null;
  }

  return {
    props: {
      code: gameData?.findGameById.code,
      game_id: params?.id ?? "",
      board_id: boardId ? boardId : "",
      existingRows: existingRows,
      result: result,
      newBoard: newBoard,
    },
  };
};
