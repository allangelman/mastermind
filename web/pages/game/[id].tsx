import { GetServerSideProps } from "next";
import Head from "next/head";
import { Game } from "../../components/Game";
import { OptionsModel } from "../../models/OptionsModel";
import { FeedbackModel } from "../../models/FeedbackModel";
import { RowModel } from "../../models/RowModel";
import { BoardModel } from "../../models/BoardModel";
import {
  getBoardData,
  getBoardVariables,
  getGameData,
  getGameVariables,
  GET_BOARD,
  GET_GAME,
  GQLClient,
} from "../../lib/graphQLClient";
import { GameModel } from "../../models/GameModel";
import { useEffect, useState } from "react";
import { GameSkeleton } from "../../components/GameSkeleton";

type GamePageProps = {
  game_id: string;
  board_id: string;
};

export default function GamePage({ game_id, board_id }: GamePageProps) {
  const gql = new GQLClient();

  const [game, setGame] = useState<GameModel>();

  useEffect(() => {
    const getData = async (): Promise<void> => {
      const gameData = await gql.request<getGameData, getGameVariables>(
        GET_GAME,
        {
          id: game_id ?? "",
        }
      );

      const getBoardData = await gql.request<getBoardData, getBoardVariables>(
        GET_BOARD,
        {
          id: board_id ?? "",
        }
      );

      const code = gameData.findGameById.code;
      const multiplayerResult = gameData.findGameById.multiplayer_result;
      const existingRows = getBoardData.findGameBoardById.rows;
      const result = getBoardData.findGameBoardById.result ?? null;
      const name = getBoardData.findGameBoardById.name ?? null;
      const existingRowsReady = [];

      for (let i = 0; i < existingRows.length; i++) {
        const rowData = existingRows[i];

        const values = rowData.values
          .split("")
          .map((char: string) => parseInt(char));

        const feedbackModel = new FeedbackModel(
          values,
          code.split("").map((char) => parseInt(char))
        );

        const row = new RowModel(
          4,
          code.split("").map((char) => parseInt(char)),
          i,
          board_id,
          values,
          feedbackModel
        );
        existingRowsReady.push(row);
      }

      const boardModel = new BoardModel(
        4,
        10,
        options,
        code.split("").map((char) => parseInt(char)),
        board_id,
        existingRowsReady,
        result ? result : undefined,
        name ? name : undefined
      );

      const gameModel = new GameModel(
        game_id,
        boardModel,
        multiplayerResult ? multiplayerResult : undefined
      );

      setGame(gameModel);
    };

    getData();
  }, []);

  const options = new OptionsModel(8);

  return (
    <>
      <Head>
        <title>Mastermind</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {game ? <Game game={game} /> : <GameSkeleton options={options} />}
    </>
  );
}

export const getServerSideProps: GetServerSideProps<
  GamePageProps,
  { id: string }
> = async ({ params, query }) => {
  let boardId: string | undefined;

  if (typeof query?.boardId === "string" && query.boardId) {
    boardId = query?.boardId;
  }

  return {
    props: {
      game_id: params?.id ?? "",
      board_id: boardId ? boardId : "",
    },
  };
};
