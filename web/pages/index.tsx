import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { Header } from "../components/Header";
import cn from "classnames";
import { GetServerSideProps } from "next";
import {
  createBoardData,
  createBoardVariables,
  createGameData,
  createGameVariables,
  CREATE_GAME,
  CREATE_GAME_BOARD,
  GQLClient,
} from "../lib/graphQLClient";
import { StartPageButton } from "../components/StartPageButton";
import { StartPageSeperator } from "../components/StartPageSeperator";
import { StartPageInput } from "../components/StartPageInput";
import { Rules } from "../components/Rules";

type HomePageProps = {
  code: string;
};

export default function Home({ code }: HomePageProps) {
  const router = useRouter();

  const [inputNameStartValue, setInputNameStartValue] = useState<string>("");
  const [inputNameJoinValue, setInputNameJoinValue] = useState<string>("");
  const [inputGameJoinValue, setInputGameJoinValue] = useState<string>("");
  const isJoinButtonDisabled =
    inputNameJoinValue === "" || inputGameJoinValue === "";
  const isStartButtonDisabled = inputNameStartValue === "";

  const [singlePlayerLoading, setIsSinglePlayerLoading] =
    useState<boolean>(false);
  const [multiPlayerLoading, setIsMutiPlayerLoading] = useState<boolean>(false);
  const [joinLoading, setIsJoinLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>();

  const gql = new GQLClient();

  const createGame = async (code: string): Promise<createGameData> => {
    const gameData = await gql.request<createGameData, createGameVariables>(
      CREATE_GAME,
      {
        createGameInput: { code },
      }
    );
    return gameData;
  };

  const createBoard = async (
    gameId: string,
    name?: string
  ): Promise<createBoardData> => {
    const boardData = await gql.request<createBoardData, createBoardVariables>(
      CREATE_GAME_BOARD,
      {
        createGameBoardInput: {
          game_id: gameId,
          name: name,
        },
      }
    );
    return boardData;
  };

  return (
    <>
      <Head>
        <title>Mastermind</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-auto w-[500px] flex flex-col mt-4 p-4 items-center rounded-lg border-2 border-blue-500 space-y-2">
        <div className="text-2xl">Mastermind</div>
        <div>Play the classic Mastermind: just you against the computer!</div>
        <StartPageButton
          onClick={async () => {
            setIsSinglePlayerLoading(true);
            const gameData = await createGame(code);
            const boardData = await createBoard(gameData.createGame.id).finally(
              () => setIsSinglePlayerLoading(false)
            );
            router.push(
              `/game/${gameData.createGame.id}?boardId=${boardData.createGameBoard.id}`
            );
          }}
          loading={singlePlayerLoading}
          text={"Start single player game"}
        />

        <StartPageSeperator />
        <div className="text-2xl">Mastermind Race</div>
        <div>
          Play Mastermind Race: compete with friends to see who can crack the
          code fastest! One person must start the game and then share the "game
          code" with the rest of the players (game code available after game
          started)
        </div>
        <StartPageInput
          inputValue={inputNameStartValue}
          label={"Player name"}
          onChange={(e) => {
            setInputNameStartValue(e.target.value);
          }}
        />
        <StartPageButton
          onClick={async () => {
            setIsMutiPlayerLoading(true);
            const gameData = await createGame(code);
            const boardData = await createBoard(
              gameData.createGame.id,
              inputNameStartValue
            ).finally(() => setIsMutiPlayerLoading(false));
            router.push(
              `/game/${gameData.createGame.id}?boardId=${boardData.createGameBoard.id}&multiplayer=true`
            );
          }}
          disabled={isStartButtonDisabled}
          loading={multiPlayerLoading}
          text={"Start multiplayer game"}
        />
        <div>
          Once one person has started the game and shared the "game code", the
          rest of the players can join the game here!
        </div>
        <StartPageInput
          inputValue={inputNameJoinValue}
          label={"Player name"}
          onChange={(e) => {
            setInputNameJoinValue(e.target.value);
          }}
        />
        <StartPageInput
          inputValue={inputGameJoinValue}
          label={"Game code"}
          onChange={(e) => {
            setInputGameJoinValue(e.target.value);
          }}
        />
        <StartPageButton
          onClick={async () => {
            try {
              const boardData = await createBoard(
                inputGameJoinValue,
                inputNameJoinValue
              ).finally(() => setIsJoinLoading(false));
              router.push(
                `/game/${inputGameJoinValue}?boardId=${boardData?.createGameBoard.id}&multiplayer=true`
              );
            } catch {
              setError(
                "The game code is not valid and/or someone with the same name already joined the game."
              );
            }
          }}
          disabled={isJoinButtonDisabled}
          loading={joinLoading}
          text={"Join multiplayer game"}
        />
        <div>{error}</div>
        <StartPageSeperator />
        <Rules />
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<
  HomePageProps
> = async () => {
  const response = await fetch(
    "https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new"
  );
  const codeWithNewLines = await response.text();
  const codeArray = codeWithNewLines.split("\n");
  const code = codeArray.join("");

  return {
    props: {
      code: code,
    },
  };
};
